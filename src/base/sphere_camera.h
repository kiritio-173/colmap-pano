/************************************************************************/
// project : graph

// author : jiangsan, school of computer science, CUG.

// e-mail: jiangsan@cug.edu.cn

// date : 2022-7-2

/************************************************************************/

#ifndef COLMAP_SRC_SPHERE_CAMERA_H_
#define COLMAP_SRC_SPHERE_CAMERA_H_

#include <Eigen/Core>

#include "base/camera.h"
#include "util/alignment.h"
#include "util/bitmap.h"
#include "util/types.h"

namespace colmap {

// Normalize a given pixel error to the camera plane.
//
// Normalized points are generated by using image2world of the camera.
// Bearing vectors are useful for points on the spherical camera.
//
// @param with				   Camera width.
// @param height		       Camera height.
// @param image_error	       Error in image plane.
// @return					   Error in camera plane.
double ImagePlaneToCameraPlaneError(const size_t width, const size_t height,
                                    double image_error);

// Convert the error in the camera plane to the pixel error.
//
// Normalized points are generated by using image2world of the camera.
// Bearing vectors are useful for points on the spherical camera.
//
// @param with				   Camera width.
// @param height		       Camera height.
// @param camera_error	       Error in camera plane.
// @return					   Error in image plane.
double CameraPlaneToImagePlaneError(const size_t width, const size_t height,
                                    double camera_error);

// Normalize a given pixel error to the sphere plane.
//
// Normalized points are generated by using image2world of the camera.
// Bearing vectors are useful for points on the spherical camera.
//
// @param with				   Camera width.
// @param height		       Camera height.
// @param image_error	       Error in image plane.
// @return					   Error in sphere plane.
double ImagePlaneToSpherePlaneError(const size_t width, const size_t height,
                                    double image_error);

// Convert the error in the sphere plane to the pixel error.
//
// Normalized points are generated by using image2world of the camera.
// Bearing vectors are useful for points on the spherical camera.
//
// @param with				   Camera width.
// @param height		       Camera height.
// @param sphere_error	       Error in sphere plane.
// @return					   Error in image plane.
double SpherePlaneToImagePlaneError(const size_t width, const size_t height,
                                    double sphere_error);

// Convert normalized points to bearing vectors on sphere.
//
// Normalized points are generated by using image2world of the camera.
// Bearing vectors are useful for points on the spherical camera.
//
// @param normalized_points     Normalized image coordinates.
// @param return		        Unit bearing vectors.
Eigen::Vector3d NormalizedPointToBearingVector(
    const Eigen::Vector2d& normalized_point);

std::vector<Eigen::Vector3d> NormalizedPointsToBearingVectors(
    const std::vector<Eigen::Vector2d>& normalized_points);

// Convert bearing vectors on sphere to normalized points.
//
// Normalized points are generated by using image2world of the camera.
// Bearing vectors are useful for points on the spherical camera.
//
// @param normalized_points     Normalized image coordinates.
// @param return		        Unit bearing vectors.
Eigen::Vector2d BearingVectorToNormalizedPoint(
    const Eigen::Vector3d& bearing_vector);

std::vector<Eigen::Vector2d> BearingVectorsToNormalizedPoints(
    const std::vector<Eigen::Vector3d>& bearing_vectors);

// Convert normalized points to [lon, lat] on sphere.
//
// Normalized points are generated by using image2world of the camera.
//
// @param normalized_points     Normalized image coordinates.
// @param return		        Lon and lat in degree.
Eigen::Vector2d NormalizedPointToLonLat(
    const Eigen::Vector2d& normalized_point);

std::vector<Eigen::Vector2d> NormalizedPointsToLonLats(
    const std::vector<Eigen::Vector2d>& normalized_points);

}  // namespace colmap

#endif  // COLMAP_SRC_SPHERE_CAMERA_H_